/***********************************
 **** Declare Color Variables ******
************************************/

.calendar td { height: 100px; width: 14.28%; }

.activity {
  border-bottom: solid 1px #CCC;
  padding: 16px 0;
}

$blue-0: #2774bf;
$blue: #246db4;
$blue-2: #236e99;
$blue-3: #2266a9;
$blue-4: #1B5791;
$blue-hover: #2266a9;
$blue-soft: #246db4;

$light-blue-0: #36bae7;
$light-blue: #35b3de;
$light-blue-2: #31a9d2;
$light-blue-3: #2fa2c9;

$teal-0: #26c3a0;
$teal: #24b494;
$teal-2: #21a789;
$teal-3: #1f997e;

$yellow-0: #fcc11e;
$yellow: #f2b81d;
$yellow-2: #e4ad1b;
$yellow-3: #dca71b;
$yellow-hover: #dca71b;

$orange-0: #ff9735;
$orange: #f38f31;
$orange-2: #e5872e;
$orange-3: #dca71b;
$orange-hover: #dca71b;

$green-0: #9bcc5c;
$green: #88b250;
$green-2: #759945;
$green-3: #618039;
$green-hover: #618039;

$red-0: #ef4c51;
$red: #e1474c;
$red-2: #d14145;
$red-3: #c03b3e;
$red-hover: #c03b3e;

$gray-x-x-lt: #f4f4f4;
$gray-x-lt: #EEE;
$gray-lt: #C0C0C0;
$gray: #919191;
$gray-med: #666;
$gray-dark: #343434;

$gray-blue-x-lt: #AEBBCC;
$gray-blue-lt: #CDD1D6;
$gray-blue-dark: #313E4F;
$gray-blue-x-dark: #28323F;
$gray-blue: #586576;

$dark-blue: #2E3847;

$bright-teal: #39BABF;
$bright-purple: #AC65A6;
$bright-blue: #009FF1;


$green: #24B494;
$blue: #246DB4;
$red: #E2575B;


/**************************
 **** Declare Mixins ******
***************************/

/**************************
 ** Declare Font Sizes ****
***************************/

$font-small: 14px;
$font-small-title: 16px;

/**************************
 ** Declare Media Sizes ***
***************************/

@mixin rounded-corners {
  border-radius: 2px;
  -moz-border-radius: 2px;
  -webkit-border-radius: 2px;
}

@mixin navbar-radius {
    border-radius: 20px;
    -moz-border-radius: 20px;
    -webkit-border-radius: 20px;
}

@mixin button-green {
    color: white;
    font-weight: 500;
    font-size: 10px;
    letter-spacing: 1.3px;
    text-transform: uppercase;

    padding: 6px 20px;
    background: $teal;
    border: 0;
    border-radius: 2px;
    // box-shadow: 0 1px 1px #fff, 0 -1px 0px $green-hover, inset 0 -1px 1px rgb(159,207,61), inset 0 1px 1px rgba(255,255,255,0.3);
    // -moz-box-shadow: 0 1px 1px #fff, 0 -1px 0px $green-hover, inset 0 -1px 1px rgb(159,207,61), inset 0 1px 1px rgba(255,255,255,0.3);
    // -webkit-box-shadow: 0 1px 1px #fff, 0 -1px 0px $green-hover, inset 0 -1px 1px rgb(159,207,61), inset 0 1px 1px rgba(255,255,255,0.3);
    &:hover { background: $teal-3; }
}

@mixin button-red {
    color: white;
    font-weight: 500;
    font-size: 13px;
    text-transform: uppercase;

    padding: 6px 18px;
    background: $red;
    border: 0;
    border-radius: 2px;


    &:hover { background: $red-hover; }
}

@mixin button-yellow {
    color: white;
    font-weight: 500;
    font-size: 13px;
    text-transform: uppercase;

    padding: 6px 18px;
    background: $yellow;
    border: 0;
    border-radius: 2px;

    &:hover { background: $yellow-hover; }
}

@mixin button-blue {
    color: white;
    font-weight: 500;
    font-size: 13px;
    text-transform: uppercase;

    padding: 6px 18px;
    background: $blue;
    border: 0;
    border-radius: 2px;

    &:hover { background: $blue-hover; }
}

@mixin tag {
    color: white;
    font-weight: 500;
    text-transform: uppercase;
    font-size: 12px;
    letter-spacing: 0.5px;

    padding: 3px 8px;
    background: $yellow;
    border: 0;
    border-radius: 1px;
}

@mixin box-shadow-blue {
  -webkit-box-shadow: 3px 6px 6px -4px $blue;
     -moz-box-shadow: 3px 6px 6px -4px $blue;
          box-shadow: 3px 6px 6px -4px $blue;
}

@mixin round-button {
  display: block;
  position: relative;
  width: 30px;
  height: 30px;
  color: $bright-teal;
  background: none;
  border: 2px solid $bright-teal;
  border-radius: 50px;

  &:hover {
    color: #fff;
    background: $bright-teal;
    border: 1px solid $bright-teal;
  }
}

@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

%inline-flex { @include inline-flex; }

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in. 
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}
  // Shorter version:
  @mixin flex-dir($args...) { @include flex-direction($args...); }

//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in. 
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else { 
    -ms-flex-wrap: $value; 
  }
  flex-wrap: $value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap> 
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid. 
//
// Values: Like "width" 
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {
    
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;    
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}
  // Shorter version:
  @mixin flex-just($args...) { @include justify-content($args...); }

//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.) 
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

//----------------------------------

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

/***********************************
 ******* Import Stylesheets ********
************************************/

@import 'nprogress';
@import 'app';
@import 'chosen';
@import 'bootstrap';
@import 'screen';
@import 'profile';
@import 'home';
@import 'social';
@import 'video';
@import 'assignments';
@import 'user_comments';
@import 'users';
@import 'layout';
@import 'scaffolds';
@import 'jquery.sidr.dark';
@import 'slidebars.min.css';
@import 'activity_feeds';

@import 'new/override';
@import 'new/topics_index';
@import 'new/topics_show';
@import 'new/tracks_show';
@import 'new/lessons_show';
@import 'new/sessions_new';
@import 'new/charges_new';
@import 'new/header_nav';
@import 'new/amas_index';
@import 'new/amas_show';

/***********************************
 ****** Install Proxima Nova *******
************************************/


@font-face {
    font-family: 'proxima_nova';
    src: url('proxima/proximanova-extrabld-webfont.eot');
    src: url('proxima/proximanova-extrabld-webfont.eot?#iefix') format('embedded-opentype'),
         url('proxima/proximanova-extrabld-webfont.woff') format('woff'),
         url('proxima/proximanova-extrabld-webfont.ttf') format('truetype'),
         url('proxima/proximanova-extrabld-webfont.svg#proxima_novaextrabold') format('svg');
    font-weight: 900;
    font-style: normal;

}

@font-face {
    font-family: 'proxima_nova';
    src: url('proxima/proximanova-light-webfont.eot');
    src: url('proxima/proximanova-light-webfont.eot?#iefix') format('embedded-opentype'),
         url('proxima/proximanova-light-webfont.woff') format('woff'),
         url('proxima/proximanova-light-webfont.ttf') format('truetype'),
         url('proxima/proximanova-light-webfont.svg#proxima_novalight') format('svg');
    font-weight: 300;
    font-style: normal;

}

@font-face {
    font-family: 'proxima_nova';
    src: url('proxima/proximanova-regular-webfont.eot');
    src: url('proxima/proximanova-regular-webfont.eot?#iefix') format('embedded-opentype'),
         url('proxima/proximanova-regular-webfont.woff') format('woff'),
         url('proxima/proximanova-regular-webfont.ttf') format('truetype'),
         url('proxima/proximanova-regular-webfont.svg#proxima_nova_rgregular') format('svg');
    font-weight: 400;
    font-style: normal;

}

@font-face {
    font-family: 'proxima_nova';
    src: url('proxima/proximanova-semibold-webfont.eot');
    src: url('proxima/proximanova-semibold-webfont.eot?#iefix') format('embedded-opentype'),
         url('proxima/proximanova-semibold-webfont.woff') format('woff'),
         url('proxima/proximanova-semibold-webfont.ttf') format('truetype'),
         url('proxima/proximanova-semibold-webfont.svg#proxima_novasemibold') format('svg');
    font-weight: 700;
    font-style: normal;

}

@font-face {
    font-family: 'proxima_nova';
    src: font-url('proxima/proximanova-bold-webfont.eot');
    src: font-url('proxima/proximanova-bold-webfont.eot?#iefix') format('embedded-opentype'),
         font-url('proxima/proximanova-bold-webfont.woff') format('woff'),
         font-url('proxima/proximanova-bold-webfont.ttf') format('truetype'),
         font-url('proxima/proximanova-bold-webfont.svg#proxima_novasemibold') format('svg');
    font-weight: 700;
    font-style: normal;
}

@font-face {
    font-family: 'proxima_novalight_italic';
    src: url('proxima/proximanova-lightit-webfont.eot');
    src: url('proxima/proximanova-lightit-webfont.eot?#iefix') format('embedded-opentype'),
         url('proxima/proximanova-lightit-webfont.woff') format('woff'),
         url('proxima/proximanova-lightit-webfont.ttf') format('truetype'),
         url('proxima/proximanova-lightit-webfont.svg#proxima_novalight_italic') format('svg');
    font-weight: 500;
    font-style: italic;

}

@font-face {
    font-family: 'proxima_nova';
    src: url('proxima/proximanova-regularit-webfont.eot');
    src: url('proxima/proximanova-regularit-webfont.eot?#iefix') format('embedded-opentype'),
         url('proxima/proximanova-regularit-webfont.woff') format('woff'),
         url('proxima/proximanova-regularit-webfont.ttf') format('truetype'),
         url('proxima/proximanova-regularit-webfont.svg#proxima_novaregular_italic') format('svg');
    font-weight: 500;
    font-style: italic;
}